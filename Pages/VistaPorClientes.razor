@page "/BeneficioDeuda"
@inject IClientesManager ClientesManager
@inject IReservaManager ReservaManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime
@implements IDisposable
<RadzenCard>
  
        <header>
            <h1 class="text-center">Listado de los Clientes</h1>
            <hr />
        </header>

          <div class="row">
            <div class="col-md-6">
                <a class="btn btn-primary" href='/Beneficios'><i class="fas fa-backward"></i>  Volver atr√°s</a>
            </div>
        </div>

        <br />
        <table class="table table-bordered table-hover table-striped" id="example">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Cedula</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Codigo Factura</th>
                    <th>Monto Pendiente</th>
                    <th>Vehiculo</th>
                    <th>Tipo</th>
                    <th>Matricula</th>
                </tr>
            </thead>
            <tbody>
                @if (FacturaModels == null)
                {
                    <tr>
                        <td colspan="12">
                            No Records to display
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var cliente in FacturaModels)
                    {
                        if(cliente.Monto_pagar >= 1)
                        {
                        <tr>
                            <td>@cliente.ID_Cliente</td>
                            <td>@cliente.Cedula_Cliente</td>
                            <td>@cliente.Nombre_Cliente</td>
                            <td>@cliente.Apellido_Cliente</td>
                            <td>@cliente.ID_Factura</td>
                            <td>@cliente.Monto_pagar.ToString("C",new CultureInfo("es-DO"))</td>
                            <td>@cliente.Marca</td>
                            <td>@cliente.Tipo</td>
                            <td>@cliente.Matricula</td>
                        </tr>
                        }
                        
                    }
                }

            </tbody>
        </table>
</RadzenCard>


@code {

    int Open = 0;
    bool SeleccionFactura = false;
    String MSJ;
    String ID;
    double valor;
    double ValoPagado;

    String Nombre;
    String Apellido;
    //Instancia una lista de la clase de Clientes
    List<Factura> FacturaModels;

    //Instancia de la clase Clientes
    Factura FacturaEntity = new Factura();

    //Metodo para borrar un Cliente con los parametros del ID normal y el ID de institucion
    protected async Task DeleteClientes(int id, string id_institucion)
    {
        await ClientesManager.Delete(id, id_institucion);
        // ClientesModel = await ClientesManager.ListarClientes(id_institucion);
    }

    //Metodo que se ejecuta de inicio y que muestra la lista de los Clientes, filtrandola por el id de institucion
    protected override async Task OnInitializedAsync()
    {
        String name = await localStorage.GetItemAsync<string>("ID_Institucion");
        FacturaModels = await ReservaManager.ListAll(name);
    }

    //Metodos para poder implementar el Datatable
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }

    void IDisposable.Dispose()
    {
        JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#example");
    }

    protected  async Task ModuloPago(string id,double pago,string nombre, string apellido)
    {
        ID = id;
        valor = pago;
        SeleccionFactura = true;
        Nombre = nombre;
        Apellido = apellido;
        //await ReservaManager.AltualizarPago(id,pago);

    }
    protected  async Task EnviarRestante()
    {
        double Restante = valor - Convert.ToDouble(ValoPagado);

        await ReservaManager.AltualizarPago(ID,Restante);

        String name = await localStorage.GetItemAsync<string>("ID_Institucion");
        FacturaModels = await ReservaManager.ListAll(name);

        SeleccionFactura = false;
        ValoPagado = 0;

    }


}
