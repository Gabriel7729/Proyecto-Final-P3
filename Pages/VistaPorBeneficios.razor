@page "/BeneficiosAuto"
@inject IVehiculosManager VehiculosManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime
@implements IDisposable
    <RadzenCard>
        <header>
            <h1 class="text-center">Listado de  Beneficios</h1>
            <hr />
        </header>

        <div class="row">
            <div class="col-md-6">
                <a class="btn btn-primary" href='/Beneficios'><i class="fas fa-backward"></i>  Volver atr√°s</a>
            </div>
        </div>
        
        <br />
        <table class="table table-bordered table-hover" id="example">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Marca</th>
                    <th>Modelo</th>
                    <th>Cantidad de veces reservado</th>
                    <th>Ingreso generado por el vehiculo</th>
                </tr>
            </thead>
            <tbody>
                @if (VehiculosModel == null)
                {
                    <tr>
                        <td colspan="12">
                            No Records to display
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var vehiculo in VehiculosModel)
                    {
                        <tr>
                            <td>@vehiculo.ID</td>
                            <td>@vehiculo.Marca</td>
                            <td>@vehiculo.Modelo</td>
                            <td>@vehiculo.Veces_Reservados</td>
                            <td>@vehiculo.Generado</td>
                        </tr>
                        
                    }
                }

            </tbody>
        </table>
    </RadzenCard>


    @code {

        //Instancia una lista de la clase de vehiculos
        List<Vehiculos> VehiculosModel;

        //Instancia de la clase Vehiculos
        Vehiculos VehiculosEntity = new Vehiculos();

        //Metodo para borrar un vehiculo con los parametros del ID normal y el ID de institucion
        protected async Task DeleteVehiculos(int id, string id_institucion)
        {
            await VehiculosManager.Delete(id, id_institucion);
            VehiculosModel = await VehiculosManager.ListAll(id_institucion);
        }

        //Metodo que se ejecuta de inicio y que muestra la lista de los vehiculos, filtrandola por el id de institucion
        protected override async Task OnInitializedAsync()
        {
            String name = await localStorage.GetItemAsync<string>("ID_Institucion");
            VehiculosModel = await VehiculosManager.ListAll(name);
        }

        //Metodos para poder implementar el Datatable
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
        }

        void IDisposable.Dispose()
        {
            JSRuntime.InvokeAsync<object>("TestDataTablesRemove", "#example");
        }

    }
