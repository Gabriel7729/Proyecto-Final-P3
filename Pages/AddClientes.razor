@page "/AddClientes"
@*Inject para el funcionamiento de los metodos asincronos para manejar la Base de Datos*@
@inject IClientesManager ClientesManager
@*Inject para el funcionamiento de navegar mediante metodos de comandos por C#*@
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@*Inject para el funcionamiento del localstorage de la variable global de la institucion*@
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<RadzenCard>
    <div class="row">
        <div class="col-md-6">
            <RadzenCard>
                <h1 class="text-center">Añadir Cliente</h1>
                <form>
                    <div class="form-group">

                        <label for="Cedula" class="control-label"><strong>Escriba la cedula del cliente:</strong></label>
                        <RadzenMask class="form-control" Mask="***-*******-*" Pattern="[^0-9]" id="Cedula" @bind-value="@cliente.Cedula" Placeholder="Cedula" />

                        <br />

                        <label for="Nombre" class="control-label"><strong>Escriba el nombre del cliente:</strong></label>
                        <RadzenTextBox class="form-control" id="Nombre" @bind-value="@cliente.Nombre" Placeholder="Nombre" />

                        <br />

                        <label for="Apellido" class="control-label"><strong>Escriba el apellido del cliente:</strong></label>
                        <RadzenTextBox class="form-control" id="Apellido" @bind-Value="cliente.Apellido" Placeholder="Apellido" />

                        <br />

                        <label for="email" class="control-label"><strong>Escriba el correo del cliente:</strong></label>
                        <input class="form-control" type="email" id="email" @bind="@cliente.Correo" Placeholder="Email" />

                        <br />

                        <label for="Licencia"><strong>Tipo de Licencia:</strong></label>
                        <select class="form-control" id="Licencia" @onchange="TipoDeLicencia">
                            <option> -- Sin seleccionar -- </option>
                            <option>Conductor</option>
                            <option>Conductor de Motociclos</option>
                            <option>Conductor de vehículos Pesados</option>
                        </select>

                        <br />

                        <label for="Nacionalidad" class="control-label"><strong>Escriba la nacionalidad del cliente:</strong></label>
                        <RadzenTextBox class="form-control" id="Nacionalidad" @bind-Value="cliente.Nacionalidad" Placeholder="Nacionalidad" />

                        <br />

                        <label for="Tipo_Sangre"><strong>Tipo de Sangre:</strong></label>
                        <select class="form-control" id="Tipo_Sangre" @onchange="TipoDeSangre">
                            <option> -- Sin seleccionar -- </option>
                            <option>O Negativo</option>
                            <option>O Positivo</option>
                            <option>A negativo</option>
                            <option>A positivo</option>
                            <option>B negativo</option>
                            <option>B positivo</option>
                            <option>AB negativo</option>
                            <option>AB positivo</option>
                        </select>

                        <br />

                        <label for="Foto" class="control-label"><strong>Inserte la foto del cliente:</strong></label>
                        <RadzenFileInput @bind-Value=@cliente.Foto_Persona Style="width:400px" TValue="string" />

                        <br />

                        <label for="Foto" class="control-label"><strong>Inserte la foto del la licencia</strong></label>
                        <RadzenFileInput @bind-Value=@cliente.Foto_Licencia Style="width:400px" TValue="string" />

                        <br />

                    </div>

                    @if (ValidarInputs)
                    {
                        <div class="alert alert-danger">
                            @MensajeError
                        </div>
                    }

                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-success btn-block" @onclick="() => CreateClientes()">Crear</button>
                        <button type="button" class="btn btn-danger btn-block" @onclick="() => cancel()">Cancelar</button>
                    </div>

                </form>
            </RadzenCard>
        </div>
    </div>
</RadzenCard>

@code {
    //Strings de los select del tipo de sangre y del tipo de la licencia
    String TipoSangre = "-- Sin seleccionar --";
    String TipoLicencia = "-- Sin seleccionar --";

    //variables para validar si todos los campos estan llenos
    string MensajeError;
    bool ValidarInputs = false;

    //String del id de la institucion
    string id;

    //Instancia de la Clase Clientes
    Clientes cliente = new Clientes();

    //Metodo que permite agregar los datos de los inputs a la tabla de clientes y después vuelve a la lista de clientes
    protected async Task CreateClientes()
    {
        //Metodo para validar si cada uno de los inputs o de los campos estan llenos y no se estan pasando nulls
        if (cliente.Cedula == null || cliente.Nombre == null || cliente.Apellido == null || cliente.Correo == null || cliente.Licencia == "-- Sin seleccionar --" || cliente.Nacionalidad == "" || cliente.Tipo_Sangre == "-- Sin seleccionar --" || cliente.Foto_Persona == null || cliente.Foto_Licencia == null)
        {
            MensajeError = "Todos los campos son necesarios...";
            ValidarInputs = true;
            return;
        }
        String name = await localStorage.GetItemAsync<string>("ID_Institucion");
        cliente.ID_Institucion = name;
        cliente.Estado = "Habilitado";
        cliente.Licencia = TipoLicencia;
        cliente.Tipo_Sangre = TipoSangre;
        await ClientesManager.Create(cliente);
        navigationManager.NavigateTo("/CRUDClientes");
    }

    //Metodo para cancelar la creaicon del cliente y volver a la lista de los clientes
    void cancel()
    {
        navigationManager.NavigateTo("/CRUDClientes");
    }

    //Metodo para manejar el select del tipo de Sangre del cliente
    public void TipoDeSangre(ChangeEventArgs e)
    {
        TipoSangre = e.Value.ToString();
    }

    //Metodo para manejar el select del tipo de licencia del cliente
    public void TipoDeLicencia(ChangeEventArgs e)
    {
        TipoLicencia = e.Value.ToString();
    }


}
