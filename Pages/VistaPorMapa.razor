@page "/VistaPorMapa"
@inject IVehiculosManager VehiculosManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<RadzenCard>

    <h1 class="text-center">Reporte de Vehículos por Mapa</h1>
    <hr />
    <br />
    @if (validar)
    {
        <center>
            <div>
                <PtoyectoFinal.Pages.DatosMapa @ref="DatosMapa"></PtoyectoFinal.Pages.DatosMapa>
                <button class="btn btn-success" @onclick="() => DatosMapa.Open()"><i class="fas fa-car"></i> Datos Vehículo @marca @modelo</button>
            </div>
        </center>
        <br />
    }

    <RadzenCard>
        <h3 class="text-center">Vehiculos por Mapa</h3>
        <RadzenGoogleMap style="height: 450px" Zoom=@zoom Center=@(new GoogleMapPosition() { Lat = 18.896296862629626, Lng = -70.78148336711416 }) MapClick=@OnMapClick MarkerClick=@OnMarkerClick>
            <Markers>
                @if (VehiculosModel2 == null)
                {
                    MensajeNull = "No se ha seleccionado ningún vehículo...";
                }
                else
                {
                    MensajeNull = "";

                    foreach (var vehiculo2 in VehiculosModel2)
                    {
                        <RadzenGoogleMapMarker Title="@(vehiculo2.Marca + " " + vehiculo2.Modelo)" Label="@(vehiculo2.Marca + vehiculo2.Modelo)" Position=@(new GoogleMapPosition() { Lat = vehiculo2.Latitud, Lng = vehiculo2.Longitud }) />
                    }
                }
            </Markers>
        </RadzenGoogleMap>
    </RadzenCard>
    <br />
    <h1 class="text-center" style="color:red;">@MensajeNull</h1>
</RadzenCard>


@code {

    private PtoyectoFinal.Pages.DatosMapa DatosMapa { get; set; }

    //Variable de tipo int que maneja cuanto Zoom tendrá el Mapa
    int zoom = 6;

    //Variables de tipo string que toman los valores del foreach de la tabla de Vehiculos
    string marca, modelo, color, año, foto, estilo, id;

    //Variable booleana, para validar sí se ha seleccionado un carro o no del marcador del mapa.
    bool validar = false;

    //Mensaje que maneja la expcecion de los VehiculosModel2, para que sí da null, se muestre esa variable
    string MensajeNull;

    //Instancia una lista de la clase de vehiculos
    List<Vehiculos> VehiculosModel2;

    //Instancia una lista de la clase de vehiculos
    List<Factura> ReservaModel;

    //Metodo que se ejecuta de inicio y que muestra la lista de los vehiculos, filtrandola por el id de institucion
    protected override async Task OnInitializedAsync()
    {
        //Id de la institucion, que se obtiene por medio del localstorage, dependiendo de cual usuario o institucion esté regustrado
        String name = await localStorage.GetItemAsync<string>("ID_Institucion");

        //Se cargan cada uno de los datos de la Tabla "Vehiculos" a la instancia de lista de la clase "Vehiculos" llamada "VehiculosModel2"
        VehiculosModel2 = await VehiculosManager.ListAll(name);
    }

    async Task ObtenerIDVehiculo(string id2)
    {
        await localStorage.SetItemAsync<string>("ID_VehiculoMapa", id2);
    }

    //Metodo que maneja el click del Mapa como evento
    void OnMapClick(GoogleMapClickEventArgs args)
    {

    }

    //Metodo que maneja el click del marcador como evento
    void OnMarkerClick(RadzenGoogleMapMarker marker)
    {
        //If, que sirva para validar si la instancia de esa lista se está pasando null o no.
        //De esa manera se evita, que se pase null a la instancia "VehiculosModel2"
        if (VehiculosModel2 == null)
        {
            //Variable para que se muestre si se pasaron valores nullos a la instancia.
            MensajeNull = "No se ha seleccionado ningún vehículo...";
        }
        else
        {
            MensajeNull = "";

            //Foreach para cargar los datos de la tabla de Vehiculos
            foreach (var vehiculo2 in VehiculosModel2)
            {
                //If, para que solamente se traiga el vehiculo del marcador que se está seleccionando
                if ((vehiculo2.Marca + " " + vehiculo2.Modelo) == marker.Title)
                {
                    //Se igualan cada una de las variables a las que se está trayendo de la tabla, para poder mostrarlas.
                    validar = true;
                    estilo = "position:fixed;left:33%;padding-top:0%";
                    id = vehiculo2.ID.ToString();
                    marca = vehiculo2.Marca;
                    modelo = vehiculo2.Modelo;
                    color = vehiculo2.Color;
                    año = vehiculo2.Año;
                    foto = vehiculo2.Foto;
                    ObtenerIDVehiculo(id);
                }
            }
        }
    }

}