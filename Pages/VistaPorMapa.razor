@page "/VistaPorMapa"
@inject IVehiculosManager VehiculosManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject DialogService DialogService

<style>
    body {
        font-family: 'Montserrat', sans-serif;
    }

    /* Category Ads */

    #ads {
        margin: 30px 0 30px 0;
    }

        #ads .card-notify-badge {
            position: absolute;
            left: -10px;
            top: -20px;
            background: #f2d900;
            text-align: center;
            border-radius: 30px 30px 30px 30px;
            color: #000;
            padding: 5px 10px;
            font-size: 14px;
        }

        #ads .card-notify-year {
            position: absolute;
            right: -10px;
            top: -20px;
            background: #ff4444;
            border-radius: 50%;
            text-align: center;
            color: #fff;
            font-size: 14px;
            width: 50px;
            height: 50px;
            padding: 15px 0 0 0;
        }


        #ads .card-detail-badge {
            background: #f2d900;
            text-align: center;
            border-radius: 30px 30px 30px 30px;
            color: #000;
            padding: 5px 10px;
            font-size: 14px;
        }



        #ads .card:hover {
            background: #fff;
            box-shadow: 12px 15px 20px 0px rgba(46,61,73,0.15);
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        #ads .card-image-overlay {
            font-size: 20px;
        }


            #ads .card-image-overlay span {
                display: inline-block;
            }


        #ads .ad-btn {
            text-transform: uppercase;
            width: 150px;
            height: 40px;
            border-radius: 80px;
            font-size: 16px;
            line-height: 35px;
            text-align: center;
            border: 3px solid #e6de08;
            display: block;
            text-decoration: none;
            margin: 20px auto 1px auto;
            color: #000;
            overflow: hidden;
            position: relative;
            background-color: #e6de08;
        }

            #ads .ad-btn:hover {
                background-color: #e6de08;
                color: #1e1717;
                border: 2px solid #e6de08;
                background: transparent;
                transition: all 0.3s ease;
                box-shadow: 12px 15px 20px 0px rgba(46,61,73,0.15);
            }

        #ads .ad-title h5 {
            text-transform: uppercase;
            font-size: 18px;
        }
</style>

<RadzenCard>
    <header>

        <h1 class="text-center">Reporte de Vehículos por Mapa</h1>
        @if (validar)
        {

            @*<RadzenButton Text=@($"Show OrderID: {id} details") Click=@(args => DialogService.Open<DatosMapa>($"Order {id}",
                new Dictionary<string, object>() { { "OrderID", id } },
                new DialogOptions(){ Width = "700px", Height = "530px" })) />*@

            <h3 style="margin-top: 20px;">Simple Dialog</h3>
            <RadzenButton Text="Show dialog with inline Blazor content" Click=@ShowInlineDialog />

        }
        <hr />
    </header>

    <RadzenCard>
        <h3 class="text-center">Vehiculos por Mapa</h3>
        <RadzenGoogleMap style="height: 450px" Zoom=@zoom Center=@(new GoogleMapPosition() { Lat = 18.896296862629626, Lng = -70.78148336711416 }) MapClick=@OnMapClick MarkerClick=@OnMarkerClick>
            <Markers>
                @if (VehiculosModel2 == null)
                {
                    MensajeNull = "No se ha seleccionado ningún vehículo...";
                }
                else
                {
                    MensajeNull = "";

                    foreach (var vehiculo2 in VehiculosModel2)
                    {
                        <RadzenGoogleMapMarker Title="@(vehiculo2.Marca + " " + vehiculo2.Modelo)" Label="@(vehiculo2.Marca + vehiculo2.Modelo)" Position=@(new GoogleMapPosition() { Lat = vehiculo2.Latitud, Lng = vehiculo2.Longitud }) />
                    }
                }

            </Markers>
        </RadzenGoogleMap>

    </RadzenCard>
    @*@if (validar)
        {
            <RadzenCard style="@estilo">
                <div class="container">
                    <h3 class="text-center">Datos del @marca @modelo</h3>
                    <div class="container" style="width:30rem;">
                        <div class="row" id="ads">
                            <center>
                                <div class="card rounded">
                                    <div class="card-image">
                                        <span class="card-notify-badge">@marca @modelo</span>
                                        <span class="card-notify-year">@año</span>
                                        <img class="img-fluid" style="width:60rem; height:18.5rem;" src="@foto" alt="Alternate Text" />
                                    </div>
                                    <br />
                                    <div class="card-image-overlay m-auto">
                                        <span class="card-detail-badge">@color</span>
                                    </div>
                                    <br />
                                </div>
                                <br />
                                <button class="btn btn-primary" @onclick="@Cerrar_Modal">Aceptar</button>
                                <br />
                                <h3 class="text-center">Próximas tres citas</h3>
                                @if (ReservaModel == null)
                                {
                                    //Variable para que se muestre si se pasaron valores nullos a la instancia.
                                    MensajeNull = "sgddgsd";
                                }
                                else
                                {
                                    foreach (var factura in ReservaModel)
                                    {
                                        <p><strong>Cita 1: </strong>@factura.Fecha_Inc - @factura.Fecha_Fin</p>
                                    }
                                }
                            </center>
                        </div>
                    </div>
                </div>
            </RadzenCard>
        }*@
    <h1 class="text-center" style="color:red;">@MensajeNull</h1>
</RadzenCard>


@code {

    async Task ShowInlineDialog() => await DialogService.OpenAsync("Simple Dialog", ds =>
    @<div>
        <p Style="margin-bottom: 1rem">Confirm?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </div>);

//Variable de tipo int que maneja cuanto Zoom tendrá el Mapa
int zoom = 6;

//Variables de tipo string que toman los valores del foreach de la tabla de Vehiculos
string marca, modelo, color, año, foto, estilo, id;

//Variable booleana, para validar sí se ha seleccionado un carro o no del marcador del mapa.
bool validar = false;

//Mensaje que maneja la expcecion de los VehiculosModel2, para que sí da null, se muestre esa variable
string MensajeNull;

//Instancia una lista de la clase de vehiculos
List<Vehiculos> VehiculosModel2;

//Instancia una lista de la clase de vehiculos
List<Factura> ReservaModel;

//Metodo que se ejecuta de inicio y que muestra la lista de los vehiculos, filtrandola por el id de institucion
protected override async Task OnInitializedAsync()
{
  //Id de la institucion, que se obtiene por medio del localstorage, dependiendo de cual usuario o institucion esté regustrado
  String name = await localStorage.GetItemAsync<string>("ID_Institucion");

  //Se cargan cada uno de los datos de la Tabla "Vehiculos" a la instancia de lista de la clase "Vehiculos" llamada "VehiculosModel2"
  VehiculosModel2 = await VehiculosManager.ListAll(name);

  DialogService.OnOpen += Open;
  DialogService.OnClose += Close;

  //ReservaModel = await VehiculosManager.ListarReservasVehiculo(name);
}

void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
{
}

void Close(dynamic result)
{
}

public void Cerrar_Modal()
{
  validar = false;
}

//Metodo que maneja el click del Mapa como evento
void OnMapClick(GoogleMapClickEventArgs args)
{

}

//Metodo que maneja el click del marcador como evento
void OnMarkerClick(RadzenGoogleMapMarker marker)
{
  //If, que sirva para validar si la instancia de esa lista se está pasando null o no.
  //De esa manera se evita, que se pase null a la instancia "VehiculosModel2"
  if (VehiculosModel2 == null)
  {
      //Variable para que se muestre si se pasaron valores nullos a la instancia.
      MensajeNull = "No se ha seleccionado ningún vehículo...";
  }
  else
  {
      MensajeNull = "";

      //Foreach para cargar los datos de la tabla de Vehiculos
      foreach (var vehiculo2 in VehiculosModel2)
      {
          //If, para que solamente se traiga el vehiculo del marcador que se está seleccionando
          if ((vehiculo2.Marca + " " + vehiculo2.Modelo) == marker.Title)
          {
              //Se igualan cada una de las variables a las que se está trayendo de la tabla, para poder mostrarlas.
              validar = true;
              estilo = "position:fixed;left:33%;padding-top:0%";
              id = vehiculo2.ID.ToString();
              marca = vehiculo2.Marca;
              modelo = vehiculo2.Modelo;
              color = vehiculo2.Color;
              año = vehiculo2.Año;
              foto = vehiculo2.Foto;
          }
      }
  }
}

}